// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Category{
  id          String @id @default(cuid()) @map("_id")
  createdAt   DateTime @default(now())
  title       String
  desc        String
  img         String
  slug        String @unique
  color       String
  products    Product[]
}

model Product{
  id          String @id @default(cuid()) @map("_id")
  createdAt   DateTime @default(now())
  title       String
  desc        String
  img         String
  price       String
  isFeatured  Boolean @default(false)
  options     Json[]
  catSlug     String 
  category    Category @relation(fields: [catSlug], references: [slug])
}

model Order{
  id          String @id @default(cuid()) @map("_id")
  createdAt   DateTime @default(now())
  products    Json[]
  price       String
  status      String
  intent_id   String? @unique 
  userEmail   String
  user        User @relation(fields:[userEmail], references: [email])

}


model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  isAdmin       Boolean @default(false) 
  Order        Order[]
}

model VerificationToken {
  identifier String @id  @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}